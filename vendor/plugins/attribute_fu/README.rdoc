= AttributeFu

Creating multi-model forms is amazingly easy with AttributeFu.


= Get It!

  $ script/plugin install git://github.com/giraffesoft/attribute_fu.git


= Examples

You can quickly learn how to use attribute_fu by reading the tutorial below, or (if you'd rather have a working example without having to do all the typing) simply try out the demo app. Get it by cloning git://github.com/TylerRick/attribute_fu.git and switching to the demo_app branch (git checkout origin/demo_app).

= Tutorial (has_many)

In this tutorial, you'll build a form for a Project model, in which a list of associated (has_many) tasks can be edited.

The first thing you need to do is enable attributes on the association.
  
  class Project < ActiveRecord::Base
    has_many :tasks, :attributes => true
  end

Instances of Project will now respond to task_attributes, whose format is as follows:
  
  @project.task_attributes = {
    @project.tasks.first.id => {:title => "A new title for an existing task"},
    :new => {
      "0" => {:title => "A new task"}
    }
  }
  
Any tasks that already exist in that collection, and are not included in the hash, as supplied to task_attributes, will be removed from the association when saved. Most of the time, the form helpers should take care of building that hash for you, though.

== Form Helpers

If you follow certain conventions, rendering your associated model's form elements is incredibly simple. The partial should have the name of the associated element's type, and look like a regular old form partial (no messy fields_for calls, or any nonsense like that).
  
  # app/views/projects/_task.html.erb
  <div class="task">
    <label>Title</label>
    <%= f.text_field :title %>
  </div>

Then, in your parent element's form, call the render_associated_form method on the form builder, with the collection of elements you'd like to render as the only argument.

  # app/views/projects/_form.html.erb
  <%= f.render_associated_form(@project.tasks) %>
  
That call will render the partial named _task.html.erb with each element in the supplied collection of tasks, wrapping the partial in a form builder (fields_for) with all the necessary arguments to produce a hash that will satisfy the task_attributes method.

You may want to add a few blank tasks to the bottom of your form; no need to do that in the controller anymore.

  <%= f.render_associated_form(@project.tasks, :new => 3) %>
  
Since this is Web 2.0, no form would be complete without some DHTML add and remove buttons. Fortunately, there are some nifty helpers to create them for us. Simply calling remove_link on the form builder in your _task partial will do the trick.

  # app/views/projects/_task.html.erb
  <div class="task">
    <label>Title</label>
    <%= f.text_field :title %>
    <%= f.remove_link "remove" %>
  </div>
  
Creating the add button is equally simple. The add_associated_link helper will do all of the heavy lifting for you.

  # app/views/projects/_form.html.erb
  <div id="tasks">
    <%= f.render_associated_form(@project.tasks, :new => 3) %>
  </div>
  <%= f.add_associated_link "Add New Task", @project.tasks.build %>
  
Just make sure you put your form inside of a container with a DOM ID named after your collection ('tasks' in our example) -- or pass the ID as :container => 'some_id' if it differs from the default.

That's all you have to do to create a multi-model form with attribute_fu!

== Discarding Blank Child Models

If you want to show a bunch of blank child model forms at the bottom of your form, but you only want to save the ones that are filled out, you can use the discard_if option. It accepts either a proc:

  class Project < ActiveRecord::Base
    has_many :tasks, :attributes => true, :discard_if => proc { |task| task.title.blank? }
  end

...or a symbol...

  class Project < ActiveRecord::Base
    has_many :tasks, :attributes => true, :discard_if => :blank?
  end
  
  class Task < ActiveRecord::Base
    def blank?
      title.blank?
    end
  end

Using a symbol allows you to keep code DRYer if you are using that routine in more than one place. Both of those examples, however, would have the same effect.


= Tutorial (has_one/belongs_to)

In this tutorial, you'll build a form for a User model, in which an associated (has_one) address can be edited.

This is even simpler than using attribute_fu with has_many associations.

Enable accessible attributes on the association:
  
    class User < ActiveRecord::Base
      has_one :address, :attributes => true
    end

Instances of User will now respond to address_attributes, whose format is as follows:
 
  @user.address_attributes = {:city => "Seattle"}
  
== Form Helpers

The partial should have the name of the associated element's type, and look like a regular old form partial.
  
  # app/views/users/_address.html.erb
  <div>
    <label>City</label>
    <%= f.text_field :city %>
    ...
  </div>

Then, in your parent element's form, call the render_associated_form method on the form builder, with the associated model as the only argument.

  # app/views/projects/_form.html.erb
  <% form_for(@user) do |f| %>
    ...
    <%= f.render_associated_form(@user.address || @user.build_address) %>
    ...
  <% end %>
  
That call will render the partial named _address.html.erb for the supplied Address object, wrapping the partial in a form builder (fields_for) such that submitting the form will produce a hash that can be assigned using the address_attributes method.

Note that with singular associations (has_one/belongs_to), the association will return nil if no model has been associated yet. However, render_associated_form will throw an error if given nil for an object, so you need to take care and ensure that the association is built if it does not exist yet. You can, for example, use <tt>@user.address || @user.build_address</tt>, which will use the user's address if it already has one or build one if it doesn't.


= Conventions

attribute_fu requires the fewest keystrokes if you follow certain conventions.

* The partial that contains your associated model's form is expected to be called _class_name.template_ext
  (e.g. the partial for your Task model would be called _task.html.erb)
* The DOM element that contains the form for your model should have the CSS class .class_name
  (e.g. the CSS class for your Task would be .task)
* The DOM element that contains all of the rendered forms should have the DOM ID #class_name
  (e.g. the DOM ID of the container of your Task forms would be #tasks)
  <i>Note: This is only relevant if using the add_associated_link method.</i>


= Updates

Come join the discussion on the {mailing list}[link:http://groups.google.com/group/attribute_fu]

Updates will be available {here}[http://jamesgolick.com/attribute_fu]

= Running the tests

To run the tests, you need Shoulda, mocha and multi-rails:

  $ sudo gem install thoughtbot-shoulda --source http://gems.github.com/
  $ sudo gem install mocha multi_rails

== Credits

attribute_fu was created by, and is maintained by, {James Golick}[http://jamesgolick.com].



Copyright (c) 2007 James Golick, GiraffeSoft Inc., released under the MIT license
